<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<ModulePrefs title="Google.com" />
<Content type="html"><![CDATA[


<!DOCTYPE html>
<html lang="en-us">
<head>
    <meta charset="utf-8"/>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/z-f3-f1/1@main/style.css"/>
    <!-- GameMonetize SDK Entegrasyonu -->
    <script type="text/javascript">
        window.SDK_OPTIONS = {
            gameId: "jp112o3o4hzgrnc7zaewjkrfk282pul8",
            onEvent: function (a) {
                switch (a.name) {
                    case "SDK_GAME_PAUSE":
                        console.log("Oyun duraklatıldı, ses kapatılıyor...");
                        if (typeof myGameInstance !== 'undefined' && myGameInstance) {
                            myGameInstance.SendMessage('AudioManager', 'MuteAudio');
                        }
                        break;
                    case "SDK_GAME_START":
                        console.log("Reklam bitti, oyun devam ediyor...");
                        if (typeof myGameInstance !== 'undefined' && myGameInstance) {
                            myGameInstance.SendMessage('AudioManager', 'UnmuteAudio');
                        }
                        break;
                    case "SDK_READY":
                        console.log("SDK hazır.");
                        break;
                }
            }
        };
        (function (a, b, c) {
            var d = a.getElementsByTagName(b)[0];
            a.getElementById(c) || (a = a.createElement(b), a.id = c, a.src = "https://cdn.jsdelivr.net/gh/testamalame/sef@main/sedk.js", d.parentNode.insertBefore(a, d));
        })(document, "script", "gamemonetize-sdk");
    </script>
    <style>
        canvas:focus { outline: none; }
        html, body {
            padding: 0;
            margin: 0;
            overflow: hidden;
            -webkit-touch-callout: none;
            -webkit-user-select: none;
            -khtml-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            -webkit-tap-highlight-color: rgba(0,0,0,0);
            height: 100%;
        }
    </style>
</head>
<body class="dark">
    <div id="unity-container" class="unity-desktop">
        <canvas id="unity-canvas" tabindex="-1"></canvas>
    </div>
    <div id="loading-cover" style="display:none;">
        <div id="unity-loading-bar">
            <div id="unity-logo"><img src="https://cdn.jsdelivr.net/gh/z-f3-f1/1@main/logo.png"/></div>
            <div id="unity-progress-bar-empty" style="display: none;">
                <div id="unity-progress-bar-full"></div>
            </div>
            <div class="spinner"></div>
        </div>
    </div>
    <script>
        const hideFullScreenButton = "";
        const buildUrl = "https://cdn.jsdelivr.net/gh/z-f3-f1/1@main/Build";
        const loaderUrl = buildUrl + "/yandexBrotli.loader.js";
        const config = {
            dataUrl: buildUrl + "/yandexBrotli.data.br",
            frameworkUrl: buildUrl + "/yandexBrotli.framewor.js",
            streamingAssetsUrl: "StreamingAssets",
            companyName: "Brain massage",
            productName: "Supercar Battle Royale",
            productVersion: "0.0.197"
        };

        function loadAndMergeFiles(files, callback) {
            var mergedBlob = [];
            var loadNextFile = function (index) {
                if (index < files.length) {
                    var file = files[index];
                    fetch(buildUrl + "/" + file)
                        .then(response => response.arrayBuffer())
                        .then(data => {
                            mergedBlob.push(new Uint8Array(data));
                            loadNextFile(index + 1);
                        })
                        .catch(error => console.error('Dosya yüklenemedi:', file, error));
                } else {
                    callback(new Blob(mergedBlob));
                }
            };
            loadNextFile(0);
        }

        var wasmFiles = ["yandexBrotli.wasm.br.part1", "yandexBrotli.wasm.br.part2"];
        const container = document.querySelector("#unity-container");
        const canvas = document.querySelector("#unity-canvas");
        const loadingCover = document.querySelector("#loading-cover");
        const progressBarEmpty = document.querySelector("#unity-progress-bar-empty");
        const progressBarFull = document.querySelector("#unity-progress-bar-full");
        const spinner = document.querySelector('.spinner');

        const canFullscreen = (function () {
            for (const key of [
                'exitFullscreen', 'webkitExitFullscreen', 'webkitCancelFullScreen',
                'mozCancelFullScreen', 'msExitFullscreen'
            ]) {
                if (key in document) return true;
            }
            return false;
        }());

        if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) {
            container.className = "unity-mobile";
        }

        let myGameInstance = null;
        let isAdShown = false;

        function showAdOnClick() {
            if (!isAdShown && typeof sdk !== 'undefined' && typeof sdk.showBanner !== 'undefined') {
                sdk.showBanner();
                isAdShown = true;
            }
        }

        loadAndMergeFiles(wasmFiles, function (mergedWasmBlob) {
            var mergedWasmFile = URL.createObjectURL(mergedWasmBlob);
            config.codeUrl = mergedWasmFile;
            var script = document.createElement("script");
            script.src = loaderUrl;
            script.onload = () => {
                createUnityInstance(canvas, config, (progress) => {
                    progressBarFull.style.width = 100 * progress + "%";
                }).then((unityInstance) => {
                    myGameInstance = unityInstance;
                    loadingCover.style.display = "none";
                    // Oyun yüklendiğinde tıklama olayını ekle
                    canvas.addEventListener('pointerdown', showAdOnClick);
                    canvas.addEventListener('touchstart', showAdOnClick);
                }).catch((message) => {
                    alert(message);
                });
            };
            document.body.appendChild(script);
        });

        loadingCover.style.background = "url('https://cdn.jsdelivr.net/gh/z-f3-f1/1@main/background.jpg') center / cover";
        loadingCover.style.display = "";
        document.addEventListener('contextmenu', event => event.preventDefault());

        function FocusGame() {
            window.focus();
            canvas.focus();
        }
        window.addEventListener('pointerdown', FocusGame);
        window.addEventListener('touchstart', FocusGame);

        let StartUnityInstance;
        let ysdk = null;
        let environmentData = {
            language: "en", domain: "default_domain", deviceType: "desktop",
            isMobile: false, isDesktop: true, isTablet: false, isTV: false,
            appID: "default_app_id", browserLang: navigator.language || "en",
            payload: null, promptCanShow: false, reviewCanShow: false,
            platform: navigator.platform,
            browser: (function() {
                let userAgent = navigator.userAgent;
                if (userAgent.includes("YaBrowser")) return "Yandex";
                if (userAgent.includes("OPR") || userAgent.includes("Opera")) return "Opera";
                if (userAgent.includes("Firefox")) return "Firefox";
                if (userAgent.includes("MSIE") || userAgent.includes("Trident")) return "IE";
                if (userAgent.includes("Edge")) return "Edge";
                if (userAgent.includes("Chrome")) return "Chrome";
                if (userAgent.includes("Safari")) return "Safari";
                return "Other";
            })()
        };
        
        let cloudSaves = 'noData';
        let paymentsData = 'none';
        let playerData = 'noData';
        let player = null;
        let payments = null;
        let initGame = false;
        let nowFullAdOpen = false;

        function GetPayments() { console.warn("GetPayments is not implemented"); return Promise.resolve("none"); }
        function SaveCloud() { console.warn("SaveCloud is not implemented"); }
        function LoadCloud() { console.warn("LoadCloud is not implemented"); return Promise.resolve("noData"); }
        function InitPlayer() { console.warn("InitPlayer is not implemented"); return Promise.resolve("noData"); }
        function FullAdShow() { console.warn("FullAdShow is not implemented"); }
        function RewardedShow() { console.warn("RewardedShow is not implemented"); }
        function StickyAdActivity() { console.warn("StickyAdActivity is not implemented"); }
        function Review() { console.warn("Review is not implemented"); }
        function PromptShow() { console.warn("PromptShow is not implemented"); }
        function InitLeaderboards() { console.warn("InitLeaderboards is not implemented"); }
        function GetLeaderboardScores() { console.warn("GetLeaderboardScores is not implemented"); }
        function SetLeaderboardScores() { console.warn("SetLeaderboardScores is not implemented"); }
        function ConsumePurchase() { console.warn("ConsumePurchase is not implemented"); }
        function ConsumePurchases() { console.warn("ConsumePurchases is not implemented"); }
        function InitLeaderboard() { console.warn("InitLeaderboard is not implemented"); }
        function BuyPayments() { console.warn("BuyPayments is not implemented"); }

        try {
            const script = document.createElement("script");
            script.src = loaderUrl;
            script.onload = () => {
                StartUnityInstance = function () {
                    createUnityInstance(canvas, config, (progress) => {
                        spinner.style.display = "none";
                        progressBarEmpty.style.display = "";
                        progressBarFull.style.width = `${100 * progress}%`;
                    }).then((unityInstance) => {
                        myGameInstance = unityInstance;
                        loadingCover.style.display = "none";
                    }).catch((message) => {
                        console.error("Unity yükleme hatası:", message);
                    });
                };
                StartUnityInstance();
            };
            document.body.appendChild(script);
        } catch (error) {
            console.error("Başlatma sırasında hata:", error);
        }

        function InitGame() {
            try {
                console.log('Init Game Success');
                initGame = true;
                if (nowFullAdOpen === true && myGameInstance != null) {
                    myGameInstance.SendMessage('YandexGame', 'OpenFullAd');
                }
            } catch (error) {
                console.error("InitGame sırasında hata:", error);
            }
        }

        window.addEventListener("unhandledrejection", function(event) {
            console.warn("Hata es geçildi:", event.reason);
            event.preventDefault();
        });
    </script>


<!-- ---------- ALT ORTADA SABİT REKLAM (738x95) - MERKEZDEN KESME YAKLAŞIMI ---------- -->
<style>
  /* Container: alt ortada, sabit, taşan içerik kırpılır */
  #ad-container {
    position: fixed;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width: min(738px, calc(100% - 20px)); /* 738px ama mobilde kenarlara 10px boşluk */
    height: 95px;
    background: rgba(0,0,0,0.90);
    display: none;
    z-index: 99999;
    border-radius: 8px 8px 0 0;
    overflow: hidden; /* İÇERİĞİN TAŞAN KISMI KIRPILSIN */
    box-shadow: 0 -2px 12px rgba(0,0,0,0.45);
    box-sizing: border-box;
  }

  /* İframe: container'dan GENİŞ tutup ortalayacağız => orta kısmı görünür */
  #ad-iframe {
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%); /* iframe'in orta kısmı container'ın ortasında olur */
    /* iframe geniş tutuluyor ki center-crop elde edilsin */
    width: 1200px; /* yeterince geniş koy; istersen 1000-1400 aralığında ayarla */
    height: 100%;
    border: 0;
    display: block;
    overflow: hidden;
    pointer-events: auto;
    box-sizing: content-box;
    -ms-overflow-style: none;  /* IE/Edge scrollbar gizle */
    scrollbar-width: none;     /* Firefox scrollbar gizle */
  }
  /* Webkit scrollbar gizleme */
  #ad-iframe::-webkit-scrollbar { display: none; width: 0; height: 0; }

  /* Kapat butonu */
  #close-ad {
    position: absolute;
    top: 6px;
    right: 8px;
    background: #ff4d4d;
    color: #fff;
    border: none;
    padding: 5px 9px;
    font-size: 13px;
    border-radius: 4px;
    cursor: not-allowed;
    opacity: 0.72;
    z-index: 100000;
  }
  #close-ad.enabled {
    cursor: pointer;
    opacity: 1;
  }

  /* Opsiyonel: sağ kenarda görünen küçük scrollbarları örtmek istersen (ince maske) */
  #ad-right-mask {
    position: absolute;
    top: 0;
    right: 0;
    width: 12px; /* gerekirse 12-18px arası dene */
    height: 100%;
    pointer-events: none; /* mask etkileşimleri engellesin */
    background: linear-gradient(to right, rgba(0,0,0,0), rgba(0,0,0,0.9));
    z-index: 99999;
  }

  /* Mobilde fazla genişlik oluşmasın diye küçük ayar */
  @media (max-width: 440px) {
    #ad-container { width: calc(100% - 12px); left: 50%; transform: translateX(-50%); border-radius: 6px 6px 0 0; }
    #ad-iframe { width: 1000px; } /* küçült */
  }
</style>

<div id="ad-container" aria-hidden="true" role="dialog" aria-label="Reklam">
  <!-- iframe ortadan gösterilecek (center-crop) -->
  <iframe id="ad-iframe"
    src="https://script.google.com/macros/s/AKfycbxLG5DHBe-sIbduDvwQZYJ3oaX_ha7rsvroprCFkQsnpZK_PEdipNia5ghxI_sdXYpv/exec"
    width="1200"
    height="95"
    scrolling="no"
    frameborder="0"
    sandbox="allow-scripts allow-popups allow-same-origin">
  </iframe>



  <!-- opsiyonel sağ maske: eğer hala küçük bir scrollbar kenarda gözüküyorsa bu örtü gizler -->
  <div id="ad-right-mask"></div>
</div>

<script>
  // 2 saniye sonra reklam göster, sonra 5s geri sayımla X etkinleşecek.
  (function(){
    const showDelay = 2000; // ms
    const countdownStart = 5; // saniye
    const adContainer = document.getElementById('ad-container');
    const closeBtn = document.getElementById('close-ad');

    setTimeout(() => {
      // Göster
      adContainer.style.display = 'block';
      adContainer.setAttribute('aria-hidden','false');

      // Geri sayım başlat
      let timeLeft = countdownStart;
      closeBtn.textContent = `Kapat (${timeLeft})`;
      const t = setInterval(() => {
        timeLeft--;
        if (timeLeft > 0) {
          closeBtn.textContent = `Kapat (${timeLeft})`;
        } else {
          clearInterval(t);
          closeBtn.disabled = false;
          closeBtn.classList.add('enabled');
          closeBtn.textContent = 'Kapat (X)';
        }
      }, 1000);

      // Kapatma
      closeBtn.addEventListener('click', () => {
        if (closeBtn.disabled) return;
        adContainer.remove();
      });

      // Fareyle sürüklenip taşınma vb. istenmiyorsa eklemeyin.
    }, showDelay);
  })();
</script>



</body>
</html>

]]></Content>
</Module>
